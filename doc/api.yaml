openapi: 3.0.0
info:
  title: Home Library Service
  description: Home music library service
  version: 1.0.0

servers:
  - url: /api


components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        login:
          type: string
          example: 'TestUser'
        version:
          type: number
          example: 1
        createAt:
          type: number
          example: 1655000000
        updateAt:
          type: number
          example: 1655000000
      required:
        - id
        - login
    Artist:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: 'Freddie Mercury'
        grammy:
          type: boolean
          example: false
      required:
        - id
        - name
    Album:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: 'Innuendo'
        year:
          type: integer
          example: 1991
        artistId:
          type: string
          format: uuid
          nullable: true
      required:
        - id
        - name
    Track:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: The Show Must Go On
        artistId:
          type: string
          format: uuid
          nullable: true
        albumId:
          type: string
          format: uuid
          nullable: true
        duration:
          type: integer
          description: In seconds
          example: 262
      required:
        - id
        - name
        - duration
    Favorites:
      type: object
      properties:
        artists:
          type: array
          items:
            $ref: '#/components/schemas/Artist'
        albums:
          type: array
          items:
            $ref: '#/components/schemas/Album'
        tracks:
          type: array
          items:
            $ref: '#/components/schemas/Track'
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - bearerAuth: []

paths:
  /user:
    post:
      operationId: UserController_create
      summary: Create user
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserDto'
      responses:
        '201':
          description: User was Created
      tags: &ref_0
        - user
    get:
      operationId: UserController_findAll
      summary: Get all users
      parameters: []
      responses:
        '200':
          description: List of users
      tags: *ref_0
  /user/{id}:
    get:
      operationId: UserController_findOne
      summary: Find an user
      parameters:
        - name: id
          required: true
          in: path
          description: User`s UUID
          schema:
            type: string
      responses:
        '200':
          description: User was fined
      tags: *ref_0
    put:
      operationId: UserController_update
      summary: Update user
      parameters:
        - name: id
          required: true
          in: path
          description: User`s UUID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserDto'
      responses:
        '200':
          description: User was updated
      tags: *ref_0
    delete:
      operationId: UserController_remove
      summary: Delete user
      parameters:
        - name: id
          required: true
          in: path
          description: User`s UUID
          schema:
            type: string
      responses:
        '204':
          description: User was daleted
      tags: *ref_0
  /track:
    post:
      operationId: TrackController_create
      summary: Create track
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTrackDto'
      responses:
        '201':
          description: Track was Created
      tags: &ref_1
        - track
    get:
      operationId: TrackController_findAll
      summary: Get all tracks
      parameters: []
      responses:
        '200':
          description: List of tracks
      tags: *ref_1
  /track/{id}:
    get:
      operationId: TrackController_findOne
      summary: Find a track
      parameters:
        - name: id
          required: true
          in: path
          description: Track`s UUID
          schema:
            type: string
      responses:
        '200':
          description: Track was fined
      tags: *ref_1
    put:
      operationId: TrackController_update
      summary: Update track
      parameters:
        - name: id
          required: true
          in: path
          description: Track`s UUID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTrackDto'
      responses:
        '200':
          description: Track was updated
      tags: *ref_1
    delete:
      operationId: TrackController_remove
      summary: Delete track
      parameters:
        - name: id
          required: true
          in: path
          description: Track`s UUID
          schema:
            type: string
      responses:
        '204':
          description: Track was daleted
      tags: *ref_1
  /favs:
    get:
      operationId: FavoritesController_findAll
      summary: Get all favorites
      parameters: []
      responses:
        '200':
          description: List of favorites
      tags: &ref_2
        - favorites
  /favs/track:
    get:
      operationId: FavoritesController_findTracks
      summary: Find all favorites tracks
      parameters: []
      responses:
        '200':
          description: favorites tracks was founded
      tags: *ref_2
  /favs/track/{id}:
    post:
      operationId: FavoritesController_createTrack
      summary: Find a favorite track
      parameters:
        - name: id
          required: true
          in: path
          description: favorite track`s UUID
          schema:
            type: string
      responses:
        '201':
          description: favorite track was founded
      tags: *ref_2
    delete:
      operationId: FavoritesController_removeTrack
      summary: Delete favorite track
      parameters:
        - name: id
          required: true
          in: path
          description: favorite track`s UUID
          schema:
            type: string
      responses:
        '204':
          description: favorite track was daleted
      tags: *ref_2
  /favs/album:
    get:
      operationId: FavoritesController_findAlbums
      summary: Find all favorites albums
      parameters: []
      responses:
        '200':
          description: favorites albums was founded
      tags: *ref_2
  /favs/album/{id}:
    post:
      operationId: FavoritesController_createAlbum
      summary: Find a favorite album
      parameters:
        - name: id
          required: true
          in: path
          description: favorite album`s UUID
          schema:
            type: string
      responses:
        '201':
          description: favorite album was founded
      tags: *ref_2
    delete:
      operationId: FavoritesController_removeAlbum
      summary: Delete favorite album
      parameters:
        - name: id
          required: true
          in: path
          description: favorite album`s UUID
          schema:
            type: string
      responses:
        '204':
          description: favorite album was daleted
      tags: *ref_2
  /favs/artist:
    get:
      operationId: FavoritesController_findArtists
      summary: Find all favorites artist
      parameters: []
      responses:
        '200':
          description: favorites artist was founded
      tags: *ref_2
  /favs/artist/{id}:
    post:
      operationId: FavoritesController_create
      summary: Find a favorite artist
      parameters:
        - name: id
          required: true
          in: path
          description: favorite artist`s UUID
          schema:
            type: string
      responses:
        '201':
          description: favorite artist was founded
      tags: *ref_2
    delete:
      operationId: FavoritesController_removeArtist
      summary: Delete favorite artist
      parameters:
        - name: id
          required: true
          in: path
          description: favorite artist`s UUID
          schema:
            type: string
      responses:
        '204':
          description: favorite artist was daleted
      tags: *ref_2
  /album:
    post:
      operationId: AlbumController_create
      summary: Create album
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAlbumDto'
      responses:
        '201':
          description: album was Created
      tags: &ref_3
        - album
    get:
      operationId: AlbumController_findAll
      summary: Get all albums
      parameters: []
      responses:
        '200':
          description: List of albums
      tags: *ref_3
  /album/{id}:
    get:
      operationId: AlbumController_findOne
      summary: Find an album
      parameters:
        - name: id
          required: true
          in: path
          description: album`s UUID
          schema:
            type: string
      responses:
        '200':
          description: album was founded
      tags: *ref_3
    put:
      operationId: AlbumController_update
      summary: Update album
      parameters:
        - name: id
          required: true
          in: path
          description: album`s UUID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAlbumDto'
      responses:
        '200':
          description: album was updated
      tags: *ref_3
    delete:
      operationId: AlbumController_remove
      summary: Delete album
      parameters:
        - name: id
          required: true
          in: path
          description: album`s UUID
          schema:
            type: string
      responses:
        '204':
          description: album was daleted
      tags: *ref_3
  /artist:
    post:
      operationId: ArtistController_create
      summary: Create artist
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateArtistDto'
      responses:
        '201':
          description: Artist was Created
      tags: &ref_4
        - artist
    get:
      operationId: ArtistController_findAll
      summary: Get all artists
      parameters: []
      responses:
        '200':
          description: List of artists
      tags: *ref_4
  /artist/{id}:
    get:
      operationId: ArtistController_findOne
      summary: Find an artist
      parameters:
        - name: id
          required: true
          in: path
          description: artist`s UUID
          schema:
            type: string
      responses:
        '200':
          description: artist was fined
      tags: *ref_4
    put:
      operationId: ArtistController_update
      summary: Update artist
      parameters:
        - name: id
          required: true
          in: path
          description: artist`s UUID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateArtistDto'
      responses:
        '200':
          description: artist was updated
      tags: *ref_4
    delete:
      operationId: ArtistController_remove
      summary: Delete artist
      parameters:
        - name: id
          required: true
          in: path
          description: artist`s UUID
          schema:
            type: string
      responses:
        '204':
          description: artist was daleted
      tags: *ref_4
info:
  title: Home Library Service
  description: The music gallery
  version: '1.0'
  contact: {}
tags:
  - name: music
    description: ''
servers: []
components:
  schemas:
    CreateUserDto:
      type: object
      properties:
        login:
          type: string
          description: User`s login
          example: user123
        password:
          type: string
          description: User`s password
          example: user123
      required:
        - login
        - password
    UpdateUserDto:
      type: object
      properties:
        oldPassword:
          type: string
          description: User`s old password for check
          example: user123
        newPassword:
          type: string
          description: User`s new password
          example: user111
      required:
        - oldPassword
        - newPassword
    CreateTrackDto:
      type: object
      properties:
        name:
          type: string
          description: track`s title
          example: song1
        artistId:
          type: string
          description: Track`s artist id
          example: b8551d1d-ab4b-4b04-9ff8-834b724a0bf7
          nullable: true
        albumId:
          type: string
          description: Track`s album id
          example: b8551d1d-ab4b-4b04-9ff8-834b724a0bf8
          nullable: true
        duration:
          type: number
          description: Duration of track
          example: 10
      required:
        - name
        - duration
    UpdateTrackDto:
      type: object
      properties:
        name:
          type: string
          description: track`s title
          example: song1
        artistId:
          type: string
          description: Track`s artist id
          example: b8551d1d-ab4b-4b04-9ff8-834b724a0bf7
          nullable: true
        albumId:
          type: string
          description: Track`s album id
          example: b8551d1d-ab4b-4b04-9ff8-834b724a0bf8
          nullable: true
        duration:
          type: number
          description: Duration of track
          example: 10
      required:
        - name
    CreateAlbumDto:
      type: object
      properties:
        name:
          type: string
          description: Album`s name
          example: Album 5
        year:
          type: number
          description: Album`s year created
          example: '2015'
        artistId:
          type: string
          description: Album`s artist id
          example: b8551d1d-ab4b-4b04-9ff8-834b724a0bf8
          nullable: true
      required:
        - name
        - year
        - artistId
    UpdateAlbumDto:
      type: object
      properties:
        name:
          type: string
          description: Album`s name
          example: Album 5
        year:
          type: number
          description: Album`s year created
          example: '2015'
        artistId:
          type: string
          description: Album`s artist id
          example: b8551d1d-ab4b-4b04-9ff8-834b724a0bf8
          nullable: true
      required:
        - name
    CreateArtistDto:
      type: object
      properties:
        name:
          type: string
          description: Artist`s name
          example: Louna
        grammy:
          type: boolean
          description: Artist has the grammy
          example: 'true'
      required:
        - name
        - grammy
    UpdateArtistDto:
      type: object
      properties:
        name:
          type: string
          description: Artist`s name
          example: Louna
        grammy:
          type: boolean
          description: Artist has the grammy
          example: 'true'
      required:
        - name
